#!/usr/bin/env python

import re
import sys
import subprocess
import random
import numpy as np
import matplotlib.pyplot as plt
import threading
import Queue

def jmap(pid) :
	match = re.compile('^[ ]+[0-9]+:[ ]+([0-9]+)[ ]+([0-9]+)[ ]+([^ ]+)')
	cmd = ['jmap', '-histo', '%d' % pid]
	p = subprocess.Popen(cmd, stdout=subprocess.PIPE, bufsize=1048576, stderr=subprocess.STDOUT)
	out, err = p.communicate()
	ret = []
	for l in out.split("\n") :
		m = match.match(l)
		if m :
			count, bytes, name = int(m.group(1)), int(m.group(2)), m.group(3)
			ret.append((count, bytes, name))
	return ret

def randomcolor() :
	def rc() :
		i = random.randint(0,255)
		h = hex(i)
		if h.startswith('0x') :
			h = h[2:]
		if len(h) == 1 :
			h = '0' + h
		return h
	return '#' + rc() + rc() + rc()

def areaplot(samples, data_rows) :
	N = samples

	plt.figure()

	bar_names = []
	bar_arrays = []
	for name, data in data_rows :
		bar_names.append(name)
		bar_arrays.append(np.array(data))

	ind = np.arange(N)
	width = 0.2

	bars = []
	for i in range(len(data_rows)) :
		kw = {}
		if i != 0 :
			kw['bottom'] = reduce(lambda x,y: x+y, bar_arrays[0:i])
		bars.append(plt.bar(ind, bar_arrays[i], width, color=randomcolor(), **kw))

	plt.ylabel('Bytes')
	plt.title('Sample')

	plt.xticks(ind+width/2., tuple(['%d' % (i+1) for i in range(N)]))
	plt.yticks(np.arange(0,300,N))

	plt.legend(tuple([b[0] for b in bars]), tuple(bar_names))
	plt.grid(True)

	plt.show()

class JavaHistoThread(threading.Thread) :
	def __init__(self, pid, rate=10) :
		self.pid = pid
		self.rate = rate
		self.dataq = Queue.Queue()
		self.stopq = Queue.Queue()
		threading.Thread.__init__(self)

	def run(self) :
		cont = True
		while cont :
			self.dataq.put(jmap(self.pid))

			try :
				cont = self.stopq.get(timeout=self.rate)
			except Queue.Empty :
				pass
		self.dataq.put(None)

def display_jmap_history(jmaps, classes) :
	integrals = {}
	for j_map in jmaps :
		for k in j_map :
			integrals.setdefault(k, 0)
			integrals[k] += j_map[k]
	totals = []
	for k in integrals :
		totals.append((k, integrals[k]))
	totals.sort(reverse=True, cmp=lambda x,y: long.__cmp__(long(x[1]), long(y[1])))

	top_names = [name for name, integ in totals[0:classes]]
	samples = len(jmaps)
	data = []
	for name in top_names :
		points = []
		for i in range(samples) :
			if name in jmaps[i] :
				points.append(jmaps[i][name])
			else :
				points.append(0)
		data.append((name, points))
	areaplot(samples, data)

if __name__ == '__main__' :
	pid = int(sys.argv[1])
	classes = 15

	jmap_thr = JavaHistoThread(pid)
	jmap_thr.start()

	try :
		j_maps = []
		while True :
			try :
				j_map = jmap_thr.dataq.get(timeout=1)
			except Queue.Empty :
				continue

			if j_map is None :
				raise KeyboardInterrupt

			name_to_bytes = {}
			# j_map is a list of (count, bytes, name)
			for count, bytes, name in j_map :
				name_to_bytes[name] = bytes
			j_maps.append(name_to_bytes)
			display_jmap_history(j_maps, classes)
	except KeyboardInterrupt :
		jmap_thr.stopq.put(None)
		jmap_thr.join()
